const WebSocket = require('ws');

console.log('Starting WebSocket subscription test...');

const ws = new WebSocket('ws://127.0.0.1:18765');
let subscriptionConfirmed = 0;
const expectedSubscriptions = 3;

ws.on('open', function open() {
  console.log('‚úÖ WebSocket connected successfully');
  
  // Î™®ÎãàÌÑ∞ÎßÅ Î©îÌä∏Î¶≠ Ï±ÑÎÑê Íµ¨ÎèÖ
  console.log('üì° Subscribing to monitoring_metrics channel...');
  ws.send(JSON.stringify({
    type: 'subscribe',
    channel: 'monitoring_metrics'
  }));
  
  // Ìó¨Ïä§ ÏóÖÎç∞Ïù¥Ìä∏ Ï±ÑÎÑê Íµ¨ÎèÖ
  console.log('üì° Subscribing to health_updates channel...');
  ws.send(JSON.stringify({
    type: 'subscribe',
    channel: 'health_updates'
  }));
  
  // Î≤ÑÌçº ÏÉÅÌÉú Ï±ÑÎÑê Íµ¨ÎèÖ
  console.log('üì° Subscribing to buffer_status channel...');
  ws.send(JSON.stringify({
    type: 'subscribe',
    channel: 'buffer_status'
  }));
});

ws.on('message', function message(data) {
  try {
    const parsed = JSON.parse(data.toString());
    
    if (parsed.type === 'subscription_confirmed') {
      subscriptionConfirmed++;
      console.log(`‚úÖ Subscription confirmed for channel: ${parsed.channel} (${subscriptionConfirmed}/${expectedSubscriptions})`);
      
      if (subscriptionConfirmed === expectedSubscriptions) {
        console.log('üéâ All subscriptions confirmed! Backend should now send monitoring data to these channels.');
      }
    } else {
      console.log('üì® Received message:', JSON.stringify(parsed, null, 2));
    }
  } catch (e) {
    console.log('üì® Received raw message:', data.toString());
  }
});

ws.on('error', function error(err) {
  console.error('‚ùå WebSocket error:', err);
});

ws.on('close', function close() {
  console.log('üîå WebSocket connection closed');
  console.log(`üìä Final subscription count: ${subscriptionConfirmed}/${expectedSubscriptions}`);
});

// 15Ï¥à ÌõÑ Ï¢ÖÎ£å (Îçî Í∏¥ ÏãúÍ∞Ñ)
setTimeout(() => {
  console.log('‚è∞ Test timeout, closing connection...');
  ws.close();
  process.exit(0);
}, 15000); 