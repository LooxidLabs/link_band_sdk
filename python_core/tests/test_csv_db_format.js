#!/usr/bin/env node

const axios = require('axios');

// API Í∏∞Î≥∏ URL
const API_BASE_URL = 'http://localhost:8121';

async function testCSVDatabaseFormat() {
    console.log('üß™ Testing CSV Format Database Storage...\n');
    
    try {
        // 1. CSV ÌòïÏãùÏúºÎ°ú ÏÑ∏ÏÖò ÏãúÏûë
        console.log('üìã Starting CSV format session...');
        const sessionData = {
            session_name: `csv_db_test_${Date.now()}`,
            settings: {
                data_format: 'CSV',
                export_path: './test_data'
            }
        };
        
        console.log('Sending:', JSON.stringify(sessionData, null, 2));
        const startResponse = await axios.post(`${API_BASE_URL}/data/start-recording`, sessionData);
        console.log('‚úÖ CSV session started:', {
            status: startResponse.data.status,
            session_name: startResponse.data.session_name,
            data_format: startResponse.data.data_format
        });
        
        // 2. Ïû†Ïãú ÎåÄÍ∏∞ ÌõÑ Ï§ëÏßÄ
        console.log('\n‚è≥ Waiting 3 seconds...');
        await new Promise(resolve => setTimeout(resolve, 3000));
        
        const stopResponse = await axios.post(`${API_BASE_URL}/data/stop-recording`);
        console.log('‚úÖ CSV session stopped:', {
            status: stopResponse.data.status,
            session_name: stopResponse.data.session_name
        });
        
        // 3. ÏÑ∏ÏÖò Î™©Î°ù Ï°∞ÌöåÌïòÏó¨ Format Ïª¨Îüº ÌôïÏù∏
        console.log('\nüìã Checking session list...');
        await new Promise(resolve => setTimeout(resolve, 1000)); // DB Ï†ÄÏû• ÎåÄÍ∏∞
        
        const sessionsResponse = await axios.get(`${API_BASE_URL}/data/sessions`);
        console.log('‚úÖ Sessions retrieved:', sessionsResponse.data.sessions.length, 'sessions');
        
        // ÏµúÏã† ÏÑ∏ÏÖò Ï∞æÍ∏∞ (Î∞©Í∏à ÏÉùÏÑ±Ìïú ÏÑ∏ÏÖò)
        const sessions = sessionsResponse.data.sessions;
        const latestSession = sessions.find(s => s.session_name === startResponse.data.session_name);
        
        if (latestSession) {
            console.log('\nüéØ Latest session details:');
            console.log('- Session Name:', latestSession.session_name);
            console.log('- Format:', latestSession.data_format || 'MISSING!');
            console.log('- Status:', latestSession.status);
            console.log('- Path:', latestSession.data_path);
            
            // ÌòïÏãù Í≤ÄÏ¶ù
            if (latestSession.data_format === 'CSV') {
                console.log('‚úÖ SUCCESS: CSV format correctly saved to database!');
            } else {
                console.log('‚ùå FAILED: Expected CSV but got:', latestSession.data_format);
            }
        } else {
            console.log('‚ùå FAILED: Could not find the created session in the list');
        }
        
        // 4. JSON ÌòïÏãùÎèÑ ÌÖåÏä§Ìä∏
        console.log('\n' + '='.repeat(50));
        console.log('üìã Testing JSON format for comparison...');
        
        const jsonSessionData = {
            session_name: `json_db_test_${Date.now()}`,
            settings: {
                data_format: 'JSON',
                export_path: './test_data'
            }
        };
        
        const jsonStartResponse = await axios.post(`${API_BASE_URL}/data/start-recording`, jsonSessionData);
        console.log('‚úÖ JSON session started:', {
            status: jsonStartResponse.data.status,
            session_name: jsonStartResponse.data.session_name,
            data_format: jsonStartResponse.data.data_format
        });
        
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        const jsonStopResponse = await axios.post(`${API_BASE_URL}/data/stop-recording`);
        console.log('‚úÖ JSON session stopped');
        
        // JSON ÏÑ∏ÏÖò ÌôïÏù∏
        await new Promise(resolve => setTimeout(resolve, 1000));
        const finalSessionsResponse = await axios.get(`${API_BASE_URL}/data/sessions`);
        const jsonSession = finalSessionsResponse.data.sessions.find(s => s.session_name === jsonStartResponse.data.session_name);
        
        if (jsonSession) {
            console.log('\nüéØ JSON session details:');
            console.log('- Session Name:', jsonSession.session_name);
            console.log('- Format:', jsonSession.data_format || 'MISSING!');
            console.log('- Status:', jsonSession.status);
            
            if (jsonSession.data_format === 'JSON') {
                console.log('‚úÖ SUCCESS: JSON format correctly saved to database!');
            } else {
                console.log('‚ùå FAILED: Expected JSON but got:', jsonSession.data_format);
            }
        }
        
        console.log('\nüìä Final Summary:');
        console.log('- CSV Format Test:', latestSession?.data_format === 'CSV' ? '‚úÖ PASS' : '‚ùå FAIL');
        console.log('- JSON Format Test:', jsonSession?.data_format === 'JSON' ? '‚úÖ PASS' : '‚ùå FAIL');
        
    } catch (error) {
        console.error('‚ùå Test failed:', error.response?.data || error.message);
    }
}

// Ïã§Ìñâ
testCSVDatabaseFormat(); 